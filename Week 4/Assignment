Weather Observation Station 8 : Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths :-
Select distinct City from Station where Lower(Substr(City, 1, 1)) IN ('a', 'e', 'i', 'o', 'u') AND Lower(Substr(City, -1)) IN ('a', 'e', 'i', 'o', 'u');


Population Density Difernece : Query the difference between the maximum and minimum populations in CITY :-
Select max(population) - min(population) As Population_difference from city


Weather Observation Station 19 : Query the Euclidean Distance between points and and format your answer to display decimal digits :-
SELECT ROUND(Sqrt(Power(MAX(LAT_N) - MIN(LAT_N), 2) + Power(MAX(LONG_W) - MIN(LONG_W), 2)),4) AS EuclideanDistance FROM STATION;


Weather Observation Station 20 :Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to decimal places.



African Cities : Query the names of all cities where the CONTINENT is 'Africa' :-
SELECT CITY.Name FROM CITY JOIN COUNTRY ON CITY.CountryCode = COUNTRY.Code WHERE COUNTRY.Continent = 'Africa';


Report : Write a SQL Query to create a report :-
SELECT
  CASE
    WHEN G.Grade < 8 THEN 'NULL'
    ELSE S.Name
  END AS Name,
  G.Grade,
  S.Marks
FROM Students S
JOIN Grades G ON S.Marks BETWEEN G.Min_Mark AND G.Max_Mark
ORDER BY 
  G.Grade DESC,
  CASE 
    WHEN G.Grade < 8 THEN S.Marks
    ELSE S.Name
  END;



Top Compettitors : Write SQL Query to find out top competitors :-
SELECT s.hacker_id, h.name
FROM Submissions s
JOIN Challenges c ON s.challenge_id = c.challenge_id
JOIN Difficulty d ON c.difficulty_level = d.difficulty_level
JOIN Hackers h ON s.hacker_id = h.hacker_id
WHERE s.score = d.score
GROUP BY s.hacker_id, h.name
HAVING COUNT(DISTINCT s.challenge_id) > 1
ORDER BY COUNT(DISTINCT s.challenge_id) DESC, s.hacker_id;



Ollivander's Inventory : Question based on Joins :-
SELECT w.id, wp.age, w.coins_needed, w.power
FROM Wands w
JOIN Wands_Property wp ON w.code = wp.code
WHERE wp.is_evil = 0
  AND w.coins_needed = (
    SELECT MIN(w2.coins_needed)
    FROM Wands w2
    JOIN Wands_Property wp2 ON w2.code = wp2.code
    WHERE wp2.is_evil = 0
      AND w2.power = w.power
      AND wp2.age = wp.age
)
ORDER BY w.power DESC, wp.age DESC;



Contest Leaderboard : Question based on joins :-
SELECT s.hacker_id, h.name, SUM(max_score) AS total_score
FROM (
    SELECT hacker_id, challenge_id, MAX(score) AS max_score
    FROM Submissions
    GROUP BY hacker_id, challenge_id
) AS s
JOIN Hackers h ON s.hacker_id = h.hacker_id
GROUP BY s.hacker_id, h.name
HAVING total_score > 0
ORDER BY total_score DESC, s.hacker_id;
